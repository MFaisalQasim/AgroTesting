<?php

namespace DummyNamespace;

use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use DummyRootNamespace{{modelNamespace}}{{modelName}};
use Illuminate\Http\Request;

class DummyClass extends Controller
{

    public function __construct()
    {
        $this->middleware('auth');
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\View\View
     */

    public function index(Request $request)
    {
        $model = str_slug('{{crudName}}','-');
        if(auth()->user()->permissions()->where('name','=','view-'.$model)->first()!= null) {
            $keyword = $request->get('search');
            $perPage = {{pagination}};

            if (!empty($keyword)) {
                ${{crudName}} = {{modelName}}::{{whereSnippet}}paginate($perPage);
            } else {
                ${{crudName}} = {{modelName}}::paginate($perPage);
            }

            return view('{{viewPath}}{{viewName}}.index', compact('{{crudName}}'));
        }
        return response(view('403'), 403);

    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\View\View
     */
    public function create()
    {
        $model = str_slug('{{crudName}}','-');
        if(auth()->user()->permissions()->where('name','=','add-'.$model)->first()!= null) {
            return view('{{viewPath}}{{viewName}}.create');
        }
        return response(view('403'), 403);

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function store(Request $request)
    {
        $model = str_slug('{{crudName}}','-');
        if(auth()->user()->permissions()->where('name','=','add-'.$model)->first()!= null) {
            {{validationRules}}
            $requestData = $request->all();
            {{fileSnippet}}
            {{modelName}}::create($requestData);
            return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} added!');
        }
        return response(view('403'), 403);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function show($id)
    {
        $model = str_slug('{{crudName}}','-');
        if(auth()->user()->permissions()->where('name','=','view-'.$model)->first()!= null) {
            ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
            return view('{{viewPath}}{{viewName}}.show', compact('{{crudNameSingular}}'));
        }
        return response(view('403'), 403);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     *
     * @return \Illuminate\View\View
     */
    public function edit($id)
    {
        $model = str_slug('{{crudName}}','-');
        if(auth()->user()->permissions()->where('name','=','edit-'.$model)->first()!= null) {
            ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
            return view('{{viewPath}}{{viewName}}.edit', compact('{{crudNameSingular}}'));
        }
        return response(view('403'), 403);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param \Illuminate\Http\Request $request
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function update(Request $request, $id)
    {
        $model = str_slug('{{crudName}}','-');
        if(auth()->user()->permissions()->where('name','=','edit-'.$model)->first()!= null) {
            {{validationRules}}
            $requestData = $request->all();
            {{fileSnippet}}
            ${{crudNameSingular}} = {{modelName}}::findOrFail($id);
             ${{crudNameSingular}}->update($requestData);

             return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} updated!');
        }
        return response(view('403'), 403);

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     *
     * @return \Illuminate\Http\RedirectResponse|\Illuminate\Routing\Redirector
     */
    public function destroy($id)
    {
        $model = str_slug('{{crudName}}','-');
        if(auth()->user()->permissions()->where('name','=','delete-'.$model)->first()!= null) {
            {{modelName}}::destroy($id);

            return redirect('{{routeGroup}}{{viewName}}')->with('flash_message', '{{modelName}} deleted!');
        }
        return response(view('403'), 403);

    }
}
